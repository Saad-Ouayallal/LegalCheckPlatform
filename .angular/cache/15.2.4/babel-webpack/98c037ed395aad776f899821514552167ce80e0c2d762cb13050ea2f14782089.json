{"ast":null,"code":"import { Answers } from '../quiz.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../questions.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@angular/material/button\";\nimport * as i6 from \"@angular/material/card\";\nimport * as i7 from \"@angular/material/radio\";\nfunction CardSelectionComponent_mat_radio_group_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-radio-group\", 2);\n    i0.ɵɵlistener(\"ngModelChange\", function CardSelectionComponent_mat_radio_group_1_Template_mat_radio_group_ngModelChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.selectedOption = $event);\n    });\n    i0.ɵɵelementStart(1, \"mat-card\")(2, \"mat-radio-button\", 3);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"img\", 4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const cardOption_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.selectedOption);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(cardOption_r1.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"src\", cardOption_r1.image, i0.ɵɵsanitizeUrl);\n  }\n}\nexport class CardSelectionComponent {\n  // inject both the active route and the questions service\n  constructor(route, questionsService) {\n    this.route = route;\n    this.questionsService = questionsService;\n    this.showResults = false;\n  }\n  ngOnInit() {\n    //read from the dynamic route and load the proper quiz data\n    this.questionsService.getQuestions(this.route.snapshot.params['quizId']).subscribe(questions => {\n      this.questions = questions;\n      this.answers = new Answers();\n      this.currentQuestionIndex = 0;\n    });\n  }\n  updateChoice(choice) {\n    this.answers.values[this.currentQuestionIndex] = choice;\n  }\n  nextOrViewResults() {\n    if (this.currentQuestionIndex === this.questions.length - 1) {\n      this.showResults = true;\n      return;\n    }\n    this.currentQuestionIndex++;\n  }\n  reset() {\n    this.quiz = undefined;\n    this.questions = undefined;\n    this.answers = undefined;\n    this.currentQuestionIndex = undefined;\n  }\n}\nCardSelectionComponent.ɵfac = function CardSelectionComponent_Factory(t) {\n  return new (t || CardSelectionComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.QuestionsService));\n};\nCardSelectionComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CardSelectionComponent,\n  selectors: [[\"app-card-selection\"]],\n  decls: 4,\n  vars: 1,\n  consts: [[3, \"ngModel\", \"ngModelChange\", 4, \"ngFor\", \"ngForOf\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\"], [3, \"ngModel\", \"ngModelChange\"], [\"value\", \"option1\"], [\"mat-card-lg-image\", \"\", \"alt\", \"\", 3, \"src\"]],\n  template: function CardSelectionComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"mat-card\");\n      i0.ɵɵtemplate(1, CardSelectionComponent_mat_radio_group_1_Template, 5, 3, \"mat-radio-group\", 0);\n      i0.ɵɵelementStart(2, \"button\", 1);\n      i0.ɵɵlistener(\"click\", function CardSelectionComponent_Template_button_click_2_listener() {\n        return ctx.goToNextPage();\n      });\n      i0.ɵɵtext(3, \"Next\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.cardOptions);\n    }\n  },\n  dependencies: [i3.NgForOf, i4.NgControlStatus, i4.NgModel, i5.MatButton, i6.MatCard, i6.MatCardLgImage, i7.MatRadioGroup, i7.MatRadioButton],\n  styles: [\".main-container[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: center;\\n  flex-direction: column;\\n  align-items: center;\\n  height: 100%;\\n  width: 100%;\\n}\\n\\n.container[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: row;\\n  gap: 5rem;\\n  align-items: center;\\n  justify-content: center;\\n}\\n\\n.main-card[_ngcontent-%COMP%] {\\n  max-width: 20%;\\n  background: white;\\n  transition: transform 0.5s ease;\\n}\\n.main-card[_ngcontent-%COMP%]   .title[_ngcontent-%COMP%] {\\n  text-align: center;\\n  text-transform: uppercase;\\n}\\n\\n.main-card[_ngcontent-%COMP%]:hover {\\n  transform: scale(1.1);\\n}\\n\\n.active[_ngcontent-%COMP%] {\\n  border: 5px solid rgb(0, 153, 255);\\n}\\n\\n.button-next[_ngcontent-%COMP%] {\\n  margin-top: 5rem;\\n  font-size: large;\\n  padding: 0 2rem;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY2FyZC1zZWxlY3Rpb24vY2FyZC1zZWxlY3Rpb24uY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxhQUFBO0VBQ0EsdUJBQUE7RUFDQSxzQkFBQTtFQUNBLG1CQUFBO0VBQ0EsWUFBQTtFQUNBLFdBQUE7QUFDRjs7QUFFQTtFQUNFLGFBQUE7RUFDQSxtQkFBQTtFQUNBLFNBQUE7RUFDQSxtQkFBQTtFQUNBLHVCQUFBO0FBQ0Y7O0FBR0E7RUFDRSxjQUFBO0VBQ0EsaUJBQUE7RUFDQSwrQkFBQTtBQUFGO0FBRUU7RUFDRSxrQkFBQTtFQUNBLHlCQUFBO0FBQUo7O0FBSUE7RUFDRSxxQkFBQTtBQURGOztBQUlBO0VBQ0Usa0NBQUE7QUFERjs7QUFJQTtFQUNFLGdCQUFBO0VBQ0EsZ0JBQUE7RUFDQSxlQUFBO0FBREYiLCJzb3VyY2VzQ29udGVudCI6WyIubWFpbi1jb250YWluZXIge1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIGhlaWdodDogMTAwJTtcclxuICB3aWR0aDogMTAwJTtcclxufVxyXG5cclxuLmNvbnRhaW5lcntcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XHJcbiAgZ2FwOiA1cmVtO1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcblxyXG59XHJcblxyXG4ubWFpbi1jYXJkIHtcclxuICBtYXgtd2lkdGg6IDIwJTtcclxuICBiYWNrZ3JvdW5kOiB3aGl0ZTtcclxuICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gLjVzIGVhc2U7XHJcblxyXG4gIC50aXRsZSB7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xyXG4gIH1cclxufVxyXG5cclxuLm1haW4tY2FyZDpob3ZlciB7XHJcbiAgdHJhbnNmb3JtOiBzY2FsZSgxLjEpO1xyXG59XHJcblxyXG4uYWN0aXZlIHtcclxuICBib3JkZXI6IDVweCBzb2xpZCByZ2IoMCwgMTUzLCAyNTUpO1xyXG59XHJcblxyXG4uYnV0dG9uLW5leHQge1xyXG4gIG1hcmdpbi10b3A6IDVyZW07XHJcbiAgZm9udC1zaXplOiBsYXJnZTtcclxuICBwYWRkaW5nOiAwIDJyZW07XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAIA,SAAeA,OAAO,QAA0B,eAAe;;;;;;;;;;;;ICU7DC,0CAAqF;IAApEA;MAAAA;MAAA;MAAA;IAAA,EAA4B;IAC3CA,gCAAU;IAC0BA,YAAoB;IAAAA,iBAAmB;IACzEA,yBAAuD;IACzDA,iBAAW;;;;;IAJIA,+CAA4B;IAEPA,eAAoB;IAApBA,yCAAoB;IAC/BA,eAAwB;IAAxBA,sEAAwB;;;ADJrD,OAAM,MAAOC,sBAAsB;EAkCjC;EACAC,YACUC,KAAqB,EACrBC,gBAAkC;IADlC,UAAK,GAALD,KAAK;IACL,qBAAgB,GAAhBC,gBAAgB;IAJ1B,gBAAW,GAAG,KAAK;EAKhB;EAEHC,QAAQ;IACN;IACA,IAAI,CAACD,gBAAgB,CAClBE,YAAY,CAAC,IAAI,CAACH,KAAK,CAACI,QAAQ,CAACC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAClDC,SAAS,CAAEC,SAAS,IAAI;MACvB,IAAI,CAACA,SAAS,GAAGA,SAAS;MAC1B,IAAI,CAACC,OAAO,GAAG,IAAIZ,OAAO,EAAE;MAC5B,IAAI,CAACa,oBAAoB,GAAG,CAAC;IAC/B,CAAC,CAAC;EACN;EAEAC,YAAY,CAACC,MAAc;IACzB,IAAI,CAACH,OAAO,CAACI,MAAM,CAAC,IAAI,CAACH,oBAAoB,CAAC,GAAGE,MAAM;EACzD;EAEAE,iBAAiB;IACf,IAAI,IAAI,CAACJ,oBAAoB,KAAK,IAAI,CAACF,SAAS,CAACO,MAAM,GAAG,CAAC,EAAE;MAC3D,IAAI,CAACC,WAAW,GAAG,IAAI;MACvB;;IAEF,IAAI,CAACN,oBAAoB,EAAE;EAC7B;EAEAO,KAAK;IACH,IAAI,CAACC,IAAI,GAAGC,SAAS;IACrB,IAAI,CAACX,SAAS,GAAGW,SAAS;IAC1B,IAAI,CAACV,OAAO,GAAGU,SAAS;IACxB,IAAI,CAACT,oBAAoB,GAAGS,SAAS;EACvC;;;mBApEWpB,sBAAsB;AAAA;;QAAtBA,sBAAsB;EAAAqB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCAnC1B,gCAAW;MACTA,+FAKkB;MAClBA,iCAAmE;MAAzBA;QAAA,OAAS2B,kBAAc;MAAA,EAAC;MAAC3B,oBAAI;MAAAA,iBAAS;;;MANXA,eAAc;MAAdA,yCAAc","names":["Answers","i0","CardSelectionComponent","constructor","route","questionsService","ngOnInit","getQuestions","snapshot","params","subscribe","questions","answers","currentQuestionIndex","updateChoice","choice","values","nextOrViewResults","length","showResults","reset","quiz","undefined","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\projects\\hajar\\hajar\\src\\app\\card-selection\\card-selection.component.ts","D:\\projects\\hajar\\hajar\\src\\app\\card-selection\\card-selection.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { switchMap } from 'rxjs/operators';\nimport { QuestionsService } from '../questions.service';\nimport { Quiz, Answers, Choice, Question } from '../quiz.model';\n\n\n\n@Component({\n  selector: 'app-card-selection',\n  templateUrl: './card-selection.component.html',\n  styleUrls: ['./card-selection.component.scss'],\n})\nexport class CardSelectionComponent implements OnInit {\n  // constructor() {}\n  // public cardOptions: CardOption[] = [\n  //   { value: 'front seat', image: '../../assets/images/front-seat.png' },\n  //   { value: 'back seat', image: '../../assets/images/rear-seat.png' },\n  // ];\n  // // public selectedCards: string[] = [];\n  // // public selectedItem: any = {};\n\n  // // ngOnInit() {\n  // //   console.log(this.selectedCards);\n  // // }\n\n  // // setItem(item: any) {\n  // //   this.selectedItem = item;\n  // // }\n\n  // // goToNextPage() {\n  // //   // this.selectedCards.push(item);\n  // // }\n  // selectedOption: string = '';\n  // selectedAnswer: string[] = [];\n\n  // goToNextPage() {\n  //   this.selectedAnswer.push(this.selectedOption);\n  //   // Navigate to the second page\n  // }\n\n  quiz!: Quiz ;\n  answers!: Answers;\n  questions!: Question[];\n  currentQuestionIndex: number | undefined;\n\n  showResults = false;\n  // inject both the active route and the questions service\n  constructor(\n    private route: ActivatedRoute,\n    private questionsService: QuestionsService\n  ) {}\n\n  ngOnInit() {\n    //read from the dynamic route and load the proper quiz data\n    this.questionsService\n      .getQuestions(this.route.snapshot.params['quizId'])\n      .subscribe((questions) => {\n        this.questions = questions;\n        this.answers = new Answers();\n        this.currentQuestionIndex = 0;\n      });\n  }\n\n  updateChoice(choice: Choice) {\n    this.answers.values[this.currentQuestionIndex] = choice;\n  }\n\n  nextOrViewResults() {\n    if (this.currentQuestionIndex === this.questions.length - 1) {\n      this.showResults = true;\n      return;\n    }\n    this.currentQuestionIndex++;\n  }\n\n  reset() {\n    this.quiz = undefined;\n    this.questions = undefined;\n    this.answers = undefined;\n    this.currentQuestionIndex = undefined;\n  }\n}\n","<!-- <div class=\"main-container\">\n  <div class=\"container\">\n    <mat-card *ngFor=\"let cardOption of cardOptions\" (click)=\"setItem(cardOption)\" class=\"main-card\"\n      [ngClass]=\"{'active' : (selectedItem.value === cardOption.value)}\">\n      <mat-card-header>\n        <mat-card-title class=\"title\">{{cardOption.value}}</mat-card-title>\n      </mat-card-header>\n      <img mat-card-image src={{cardOption.image}} alt=\"\">\n    </mat-card>\n  </div>\n  <button mat-fab extended color=\"accent\"  class=\"button-next\" [disabled]=\"!selectedItem.value\" (click)=\"goToNextPage()\">Next</button>\n</div> -->\n\n<mat-card >\n  <mat-radio-group [(ngModel)]=\"selectedOption\" *ngFor=\"let cardOption of cardOptions\">\n    <mat-card>\n      <mat-radio-button value=\"option1\">{{cardOption.value}}</mat-radio-button>\n      <img mat-card-lg-image src={{cardOption.image}} alt=\"\">\n    </mat-card>\n  </mat-radio-group>\n  <button mat-raised-button color=\"primary\" (click)=\"goToNextPage()\">Next</button>\n</mat-card>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}