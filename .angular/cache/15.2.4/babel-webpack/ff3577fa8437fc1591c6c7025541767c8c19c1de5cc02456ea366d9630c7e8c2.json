{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/material/card\";\nfunction InputFormComponent_div_1_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"label\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"input\", 4);\n    i0.ɵɵelementStart(4, \"button\", 5);\n    i0.ɵɵtext(5, \"Submit\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const control_r4 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(control_r4.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", control_r4.type)(\"formControlName\", control_r4.name)(\"value\", control_r4.value);\n  }\n}\nfunction InputFormComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, InputFormComponent_div_1_div_1_Template, 6, 4, \"div\", 1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const type_r2 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", type_r2.values);\n  }\n}\nfunction InputFormComponent_label_6_label_1_img_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"img\", 10);\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(3);\n    i0.ɵɵpropertyInterpolate(\"src\", ctx_r8.choice.image, i0.ɵɵsanitizeUrl);\n  }\n}\nfunction InputFormComponent_label_6_label_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\")(1, \"li\")(2, \"span\", 6);\n    i0.ɵɵelement(3, \"input\", 7);\n    i0.ɵɵelementStart(4, \"span\", 8);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, InputFormComponent_label_6_label_1_img_6_Template, 1, 1, \"img\", 9);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"value\", ctx_r6.choice);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r6.choice.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r6.choice.image);\n  }\n}\nfunction InputFormComponent_label_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\");\n    i0.ɵɵtemplate(1, InputFormComponent_label_6_label_1_Template, 7, 3, \"label\", 1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const type_r5 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", type_r5.values);\n  }\n}\nexport class InputFormComponent {\n  constructor(fb) {\n    this.fb = fb;\n    this.myForm = this.fb.group({});\n  }\n  ngOnChanges(changes) {\n    if (!changes.jsonFormData.firstChange) {\n      this.createForm(this.jsonFormData.types);\n    }\n  }\n  createForm(types) {\n    for (const type of types) {\n      for (const control of type.values) {\n        const validatorsToAdd = [];\n        for (const [key, value] of Object.entries(control.validators)) {\n          switch (key) {\n            case 'min':\n              validatorsToAdd.push(Validators.min(value));\n              break;\n            case 'max':\n              validatorsToAdd.push(Validators.max(value));\n              break;\n            case 'required':\n              if (value) {\n                validatorsToAdd.push(Validators.required);\n              }\n              break;\n            case 'requiredTrue':\n              if (value) {\n                validatorsToAdd.push(Validators.requiredTrue);\n              }\n              break;\n            case 'email':\n              if (value) {\n                validatorsToAdd.push(Validators.email);\n              }\n              break;\n            case 'minLength':\n              validatorsToAdd.push(Validators.minLength(value));\n              break;\n            case 'maxLength':\n              validatorsToAdd.push(Validators.maxLength(value));\n              break;\n            case 'pattern':\n              validatorsToAdd.push(Validators.pattern(value));\n              break;\n            case 'nullValidator':\n              if (value) {\n                validatorsToAdd.push(Validators.nullValidator);\n              }\n              break;\n            default:\n              break;\n          }\n          this.myForm.addControl(control.name, this.fb.control(control.value, validatorsToAdd));\n        }\n      }\n    }\n  }\n  onSubmit() {\n    console.log('Form valid: ', this.myForm.valid);\n    console.log('Form values: ', this.myForm.value);\n  }\n}\nInputFormComponent.ɵfac = function InputFormComponent_Factory(t) {\n  return new (t || InputFormComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\nInputFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: InputFormComponent,\n  selectors: [[\"app-input-form\"]],\n  inputs: {\n    jsonFormData: \"jsonFormData\",\n    answers: \"answers\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 7,\n  vars: 4,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [4, \"ngFor\", \"ngForOf\"], [1, \"question-form-container\"], [1, \"form-group\"], [3, \"type\", \"formControlName\", \"value\"], [\"type\", \"submit\"], [1, \"choice-container\"], [\"type\", \"radio\", \"formControlName\", \"choice\", 3, \"value\"], [1, \"value-text\"], [\"mat-card-lg-image\", \"\", \"alt\", \"\", 3, \"src\", 4, \"ngIf\"], [\"mat-card-lg-image\", \"\", \"alt\", \"\", 3, \"src\"]],\n  template: function InputFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function InputFormComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵtemplate(1, InputFormComponent_div_1_Template, 2, 1, \"div\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"mat-card\", 2)(3, \"mat-card-content\")(4, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function InputFormComponent_Template_form_ngSubmit_4_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(5, \"div\", 3);\n      i0.ɵɵtemplate(6, InputFormComponent_label_6_Template, 2, 1, \"label\", 1);\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.myForm);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.jsonFormData == null ? null : ctx.jsonFormData.types);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"formGroup\", ctx.myForm);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", ctx.jsonFormData == null ? null : ctx.jsonFormData.types);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.RadioControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i3.MatCard, i3.MatCardContent, i3.MatCardLgImage, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"],\n  changeDetection: 0\n});","map":{"version":3,"mappings":"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","names":["Validators","i0","InputFormComponent","constructor","fb","group","ngOnChanges","changes","jsonFormData","firstChange","createForm","types","type","control","values","validatorsToAdd","key","value","Object","entries","validators","push","min","max","required","requiredTrue","email","minLength","maxLength","pattern","nullValidator","myForm","addControl","name","onSubmit","console","log","valid","selectors","inputs","answers","features","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\projects\\hajar\\hajar\\src\\app\\input-form\\input-form.component.ts","D:\\projects\\hajar\\hajar\\src\\app\\input-form\\input-form.component.html"],"sourcesContent":["import { Component, Input, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n\ninterface JsonFormValidators {\n  min?: number;\n  max?: number;\n  required?: boolean;\n}\n\n\ninterface JsonFormControls {\n  name: string;\n  description: string;\n  value: string;\n  type: string;\n  validators: JsonFormValidators;\n}\n\ninterface JsonFormTypes {\n  name: string;\n  values: JsonFormControls[];\n}\nexport interface JsonFormData {\n  types: JsonFormTypes[];\n}\n\n@Component({\n  selector: 'app-input-form',\n  templateUrl: './input-form.component.html',\n  styleUrls: ['./input-form.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class InputFormComponent implements OnChanges {\n  @Input()\n  jsonFormData!: JsonFormData;\n\n  @Input() answers: any;\n\n  public myForm: FormGroup = this.fb.group({});\n\n  constructor(private fb: FormBuilder) {}\n  ngOnChanges(changes: SimpleChanges) {\n    if (!changes.jsonFormData.firstChange) {\n      this.createForm(this.jsonFormData.types);\n    }\n\n  }\n\n  createForm(types: JsonFormTypes[]) {\n    for (const type of types) {\n      for (const control of type.values) {\n        const validatorsToAdd = [];\n        for (const [key, value] of Object.entries(control.validators)) {\n          switch (key) {\n            case 'min':\n              validatorsToAdd.push(Validators.min(value));\n              break;\n            case 'max':\n              validatorsToAdd.push(Validators.max(value));\n              break;\n            case 'required':\n              if (value) {\n                validatorsToAdd.push(Validators.required);\n              }\n              break;\n            case 'requiredTrue':\n              if (value) {\n                validatorsToAdd.push(Validators.requiredTrue);\n              }\n              break;\n            case 'email':\n              if (value) {\n                validatorsToAdd.push(Validators.email);\n              }\n              break;\n            case 'minLength':\n              validatorsToAdd.push(Validators.minLength(value));\n              break;\n            case 'maxLength':\n              validatorsToAdd.push(Validators.maxLength(value));\n              break;\n            case 'pattern':\n              validatorsToAdd.push(Validators.pattern(value));\n              break;\n            case 'nullValidator':\n              if (value) {\n                validatorsToAdd.push(Validators.nullValidator);\n              }\n              break;\n            default:\n              break;\n          }\n\n          this.myForm.addControl(\n            control.name,\n            this.fb.control(control.value, validatorsToAdd)\n          );\n        }\n      }\n    }\n  }\n\n  onSubmit() {\n    console.log('Form valid: ', this.myForm.valid);\n    console.log('Form values: ', this.myForm.value);\n  }\n}\n","<form [formGroup]=\"myForm\" (ngSubmit)=\"onSubmit()\">\n  <div *ngFor=\"let type of jsonFormData?.types\">\n    <div *ngFor=\"let control of type.values\">\n        <label>{{ control.name }}</label>\n        <input [type]=\"control.type\" [formControlName]=\"control.name\" [value]=\"control.value\">\n        <button type=\"submit\">Submit</button>\n    </div>\n  </div>\n</form>\n\n\n<mat-card class=\"question-form-container\">\n  <mat-card-content>\n    <form [formGroup]=\"myForm\" (ngSubmit)=\"onSubmit()\">\n      <div class=\"form-group\">\n        <label *ngFor=\"let type of jsonFormData?.types\">\n          <label *ngFor=\"let control of type.values\">\n            <li>\n              <span class=\"choice-container\">\n                <input type=\"radio\" [value]=\"choice\" formControlName=\"choice\">\n                <span class=\"value-text\">{{choice.value}}</span>\n                <img *ngIf=\"choice.image\" mat-card-lg-image src={{choice.image}} alt=\"\">\n              </span>\n\n            </li>\n          </label>\n        </label>\n      </div>\n    </form>\n\n  </mat-card-content>\n\n\n</mat-card>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}