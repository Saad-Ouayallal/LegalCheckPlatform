{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Input } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport class MyErrorStateMatcher {\n  isErrorState(control, form) {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n}\nexport class InputFormComponent {\n  constructor(fb) {\n    this.fb = fb;\n    this.myForm = this.fb.group({});\n  }\n  ngOnInit() {\n    this.createForm(this.jsonFormData.types);\n  }\n  createForm(types) {\n    for (const type of types) {\n      for (const control of type.values) {\n        const validatorsToAdd = [];\n        for (const [key, value] of Object.entries(control.validators)) {\n          switch (key) {\n            case 'min':\n              validatorsToAdd.push(Validators.min(value));\n              break;\n            case 'max':\n              validatorsToAdd.push(Validators.max(value));\n              break;\n            case 'required':\n              if (value) {\n                validatorsToAdd.push(Validators.required);\n              }\n              break;\n            case 'requiredTrue':\n              if (value) {\n                validatorsToAdd.push(Validators.requiredTrue);\n              }\n              break;\n            case 'email':\n              if (value) {\n                validatorsToAdd.push(Validators.email);\n              }\n              break;\n            case 'minLength':\n              validatorsToAdd.push(Validators.minLength(value));\n              break;\n            case 'maxLength':\n              validatorsToAdd.push(Validators.maxLength(value));\n              break;\n            case 'pattern':\n              validatorsToAdd.push(Validators.pattern(value));\n              break;\n            case 'nullValidator':\n              if (value) {\n                validatorsToAdd.push(Validators.nullValidator);\n              }\n              break;\n            default:\n              break;\n          }\n          this.myForm.addControl(control.name, this.fb.control(control.value, validatorsToAdd));\n        }\n      }\n    }\n  }\n  onSubmit() {\n    console.log('Form valid: ', this.myForm.valid);\n    console.log('Form values: ', this.myForm.value);\n  }\n}\n__decorate([Input()], InputFormComponent.prototype, \"jsonFormData\", void 0);\n__decorate([Input()], InputFormComponent.prototype, \"answers\", void 0);","map":{"version":3,"mappings":";AAAA,SAAoBA,KAAK,QAAwD,eAAe;AAChG,SAA0EC,UAAU,QAAQ,gBAAgB;AA6B5G,OAAM,MAAOC,mBAAmB;EAC9BC,YAAY,CACVC,OAA2B,EAC3BC,IAAwC;IAExC,MAAMC,WAAW,GAAGD,IAAI,IAAIA,IAAI,CAACE,SAAS;IAC1C,OAAO,CAAC,EACNH,OAAO,IACPA,OAAO,CAACI,OAAO,KACdJ,OAAO,CAACK,KAAK,IAAIL,OAAO,CAACM,OAAO,IAAIJ,WAAW,CAAC,CAClD;EACH;;AAMF,OAAM,MAAOK,kBAAkB;EAQ7BC,YAAoBC,EAAe;IAAf,OAAE,GAAFA,EAAE;IAFf,WAAM,GAAc,IAAI,CAACA,EAAE,CAACC,KAAK,CAAC,EAAE,CAAC;EAEN;EACtCC,QAAQ;IAEJ,IAAI,CAACC,UAAU,CAAC,IAAI,CAACC,YAAY,CAACC,KAAK,CAAC;EAG5C;EAEAF,UAAU,CAACE,KAAsB;IAC/B,KAAK,MAAMC,IAAI,IAAID,KAAK,EAAE;MACxB,KAAK,MAAMd,OAAO,IAAIe,IAAI,CAACC,MAAM,EAAE;QACjC,MAAMC,eAAe,GAAG,EAAE;QAC1B,KAAK,MAAM,CAACC,GAAG,EAAEC,KAAK,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACrB,OAAO,CAACsB,UAAU,CAAC,EAAE;UAC7D,QAAQJ,GAAG;YACT,KAAK,KAAK;cACRD,eAAe,CAACM,IAAI,CAAC1B,UAAU,CAAC2B,GAAG,CAACL,KAAK,CAAC,CAAC;cAC3C;YACF,KAAK,KAAK;cACRF,eAAe,CAACM,IAAI,CAAC1B,UAAU,CAAC4B,GAAG,CAACN,KAAK,CAAC,CAAC;cAC3C;YACF,KAAK,UAAU;cACb,IAAIA,KAAK,EAAE;gBACTF,eAAe,CAACM,IAAI,CAAC1B,UAAU,CAAC6B,QAAQ,CAAC;;cAE3C;YACF,KAAK,cAAc;cACjB,IAAIP,KAAK,EAAE;gBACTF,eAAe,CAACM,IAAI,CAAC1B,UAAU,CAAC8B,YAAY,CAAC;;cAE/C;YACF,KAAK,OAAO;cACV,IAAIR,KAAK,EAAE;gBACTF,eAAe,CAACM,IAAI,CAAC1B,UAAU,CAAC+B,KAAK,CAAC;;cAExC;YACF,KAAK,WAAW;cACdX,eAAe,CAACM,IAAI,CAAC1B,UAAU,CAACgC,SAAS,CAACV,KAAK,CAAC,CAAC;cACjD;YACF,KAAK,WAAW;cACdF,eAAe,CAACM,IAAI,CAAC1B,UAAU,CAACiC,SAAS,CAACX,KAAK,CAAC,CAAC;cACjD;YACF,KAAK,SAAS;cACZF,eAAe,CAACM,IAAI,CAAC1B,UAAU,CAACkC,OAAO,CAACZ,KAAK,CAAC,CAAC;cAC/C;YACF,KAAK,eAAe;cAClB,IAAIA,KAAK,EAAE;gBACTF,eAAe,CAACM,IAAI,CAAC1B,UAAU,CAACmC,aAAa,CAAC;;cAEhD;YACF;cACE;UAAM;UAGV,IAAI,CAACC,MAAM,CAACC,UAAU,CACpBlC,OAAO,CAACmC,IAAI,EACZ,IAAI,CAAC1B,EAAE,CAACT,OAAO,CAACA,OAAO,CAACmB,KAAK,EAAEF,eAAe,CAAC,CAChD;;;;EAIT;EAEAmB,QAAQ;IACNC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAE,IAAI,CAACL,MAAM,CAACM,KAAK,CAAC;IAC9CF,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,IAAI,CAACL,MAAM,CAACd,KAAK,CAAC;EACjD;;AAvEAqB,YADC5C,KAAK,EAAE,wDACoB;AAEnB4C,YAAR5C,KAAK,EAAE,mDAAc","names":["Input","Validators","MyErrorStateMatcher","isErrorState","control","form","isSubmitted","submitted","invalid","dirty","touched","InputFormComponent","constructor","fb","group","ngOnInit","createForm","jsonFormData","types","type","values","validatorsToAdd","key","value","Object","entries","validators","push","min","max","required","requiredTrue","email","minLength","maxLength","pattern","nullValidator","myForm","addControl","name","onSubmit","console","log","valid","__decorate"],"sourceRoot":"","sources":["D:\\projects\\hajar\\hajar\\src\\app\\input-form\\input-form.component.ts"],"sourcesContent":["import { Component, Input, OnInit, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, FormGroupDirective, NgForm, Validators } from '@angular/forms';\nimport { ErrorStateMatcher } from '@angular/material/core';\n\ninterface JsonFormValidators {\n  min?: number;\n  max?: number;\n  required?: boolean;\n}\n\n\ninterface JsonFormControls {\n  name: string;\n  description: string;\n  value: string;\n  type: string;\n  validators: JsonFormValidators;\n}\n\ninterface JsonFormTypes {\n  name: string;\n  values: JsonFormControls[];\n}\nexport interface JsonFormData {\n  types: JsonFormTypes[];\n}\n\n\n\n\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(\n    control: FormControl | null,\n    form: FormGroupDirective | NgForm | null\n  ): boolean {\n    const isSubmitted = form && form.submitted;\n    return !!(\n      control &&\n      control.invalid &&\n      (control.dirty || control.touched || isSubmitted)\n    );\n  }\n}\n\n\n\n\nexport class InputFormComponent implements OnInit {\n  @Input()\n  jsonFormData!: JsonFormData;\n\n  @Input() answers: any;\n\n  public myForm: FormGroup = this.fb.group({});\n\n  constructor(private fb: FormBuilder) {}\n  ngOnInit() {\n\n      this.createForm(this.jsonFormData.types);\n\n\n  }\n\n  createForm(types: JsonFormTypes[]) {\n    for (const type of types) {\n      for (const control of type.values) {\n        const validatorsToAdd = [];\n        for (const [key, value] of Object.entries(control.validators)) {\n          switch (key) {\n            case 'min':\n              validatorsToAdd.push(Validators.min(value));\n              break;\n            case 'max':\n              validatorsToAdd.push(Validators.max(value));\n              break;\n            case 'required':\n              if (value) {\n                validatorsToAdd.push(Validators.required);\n              }\n              break;\n            case 'requiredTrue':\n              if (value) {\n                validatorsToAdd.push(Validators.requiredTrue);\n              }\n              break;\n            case 'email':\n              if (value) {\n                validatorsToAdd.push(Validators.email);\n              }\n              break;\n            case 'minLength':\n              validatorsToAdd.push(Validators.minLength(value));\n              break;\n            case 'maxLength':\n              validatorsToAdd.push(Validators.maxLength(value));\n              break;\n            case 'pattern':\n              validatorsToAdd.push(Validators.pattern(value));\n              break;\n            case 'nullValidator':\n              if (value) {\n                validatorsToAdd.push(Validators.nullValidator);\n              }\n              break;\n            default:\n              break;\n          }\n\n          this.myForm.addControl(\n            control.name,\n            this.fb.control(control.value, validatorsToAdd)\n          );\n        }\n      }\n    }\n  }\n\n  onSubmit() {\n    console.log('Form valid: ', this.myForm.valid);\n    console.log('Form values: ', this.myForm.value);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}