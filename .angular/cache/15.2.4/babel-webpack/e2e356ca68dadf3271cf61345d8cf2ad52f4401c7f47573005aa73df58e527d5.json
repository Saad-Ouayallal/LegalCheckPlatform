{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/material/card\";\nfunction InputFormComponent_label_4_label_1_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" Minimum required number is 15. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction InputFormComponent_label_4_label_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\")(1, \"li\")(2, \"span\", 5)(3, \"label\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"label\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(7, \"input\", 6);\n    i0.ɵɵtemplate(8, InputFormComponent_label_4_label_1_div_8_Template, 2, 0, \"div\", 7);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const control_r3 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(control_r3.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(control_r3.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", control_r3.type)(\"formControlName\", control_r3.name)(\"value\", control_r3.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.myForm.controls[\"myNum\"].hasError(\"max\"));\n  }\n}\nfunction InputFormComponent_label_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\");\n    i0.ɵɵtemplate(1, InputFormComponent_label_4_label_1_Template, 9, 6, \"label\", 3);\n    i0.ɵɵelementStart(2, \"button\", 4);\n    i0.ɵɵtext(3, \"Submit\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const type_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", type_r1.values);\n  }\n}\nexport class InputFormComponent {\n  constructor(fb) {\n    this.fb = fb;\n    this.myForm = this.fb.group({});\n  }\n  ngOnInit() {\n    this.createForm(this.jsonFormData.types);\n  }\n  createForm(types) {\n    for (const type of types) {\n      for (const control of type.values) {\n        const validatorsToAdd = [];\n        for (const [key, value] of Object.entries(control.validators)) {\n          switch (key) {\n            case 'min':\n              validatorsToAdd.push(Validators.min(value));\n              break;\n            case 'max':\n              validatorsToAdd.push(Validators.max(value));\n              break;\n            case 'required':\n              if (value) {\n                validatorsToAdd.push(Validators.required);\n              }\n              break;\n            case 'requiredTrue':\n              if (value) {\n                validatorsToAdd.push(Validators.requiredTrue);\n              }\n              break;\n            case 'email':\n              if (value) {\n                validatorsToAdd.push(Validators.email);\n              }\n              break;\n            case 'minLength':\n              validatorsToAdd.push(Validators.minLength(value));\n              break;\n            case 'maxLength':\n              validatorsToAdd.push(Validators.maxLength(value));\n              break;\n            case 'pattern':\n              validatorsToAdd.push(Validators.pattern(value));\n              break;\n            case 'nullValidator':\n              if (value) {\n                validatorsToAdd.push(Validators.nullValidator);\n              }\n              break;\n            default:\n              break;\n          }\n          this.myForm.addControl(control.name, this.fb.control(control.value, validatorsToAdd));\n        }\n      }\n    }\n  }\n  onSubmit() {\n    console.log('Form valid: ', this.myForm.valid);\n    console.log('Form values: ', this.myForm.value);\n  }\n}\nInputFormComponent.ɵfac = function InputFormComponent_Factory(t) {\n  return new (t || InputFormComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\nInputFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: InputFormComponent,\n  selectors: [[\"app-input-form\"]],\n  inputs: {\n    jsonFormData: \"jsonFormData\",\n    answers: \"answers\"\n  },\n  decls: 5,\n  vars: 2,\n  consts: [[1, \"question-form-container\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [4, \"ngFor\", \"ngForOf\"], [\"type\", \"submit\"], [1, \"choice-container\"], [3, \"type\", \"formControlName\", \"value\"], [4, \"ngIf\"]],\n  template: function InputFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"mat-card\", 0)(1, \"mat-card-content\")(2, \"form\", 1);\n      i0.ɵɵlistener(\"ngSubmit\", function InputFormComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(3, \"div\", 2);\n      i0.ɵɵtemplate(4, InputFormComponent_label_4_Template, 4, 1, \"label\", 3);\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.myForm);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", ctx.jsonFormData == null ? null : ctx.jsonFormData.types);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i3.MatCard, i3.MatCardContent, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"],\n  changeDetection: 0\n});","map":{"version":3,"mappings":"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","names":["Validators","i0","InputFormComponent","constructor","fb","group","ngOnInit","createForm","jsonFormData","types","type","control","values","validatorsToAdd","key","value","Object","entries","validators","push","min","max","required","requiredTrue","email","minLength","maxLength","pattern","nullValidator","myForm","addControl","name","onSubmit","console","log","valid","selectors","inputs","answers","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\projects\\hajar\\hajar\\src\\app\\input-form\\input-form.component.ts","D:\\projects\\hajar\\hajar\\src\\app\\input-form\\input-form.component.html"],"sourcesContent":["import { Component, Input, OnInit, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n\ninterface JsonFormValidators {\n  min?: number;\n  max?: number;\n  required?: boolean;\n}\n\n\ninterface JsonFormControls {\n  name: string;\n  description: string;\n  value: string;\n  type: string;\n  validators: JsonFormValidators;\n}\n\ninterface JsonFormTypes {\n  name: string;\n  values: JsonFormControls[];\n}\nexport interface JsonFormData {\n  types: JsonFormTypes[];\n}\n\n@Component({\n  selector: 'app-input-form',\n  templateUrl: './input-form.component.html',\n  styleUrls: ['./input-form.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class InputFormComponent implements OnInit {\n  @Input()\n  jsonFormData!: JsonFormData;\n\n  @Input() answers: any;\n\n  public myForm: FormGroup = this.fb.group({});\n\n  constructor(private fb: FormBuilder) {}\n  ngOnInit() {\n\n      this.createForm(this.jsonFormData.types);\n    \n\n  }\n\n  createForm(types: JsonFormTypes[]) {\n    for (const type of types) {\n      for (const control of type.values) {\n        const validatorsToAdd = [];\n        for (const [key, value] of Object.entries(control.validators)) {\n          switch (key) {\n            case 'min':\n              validatorsToAdd.push(Validators.min(value));\n              break;\n            case 'max':\n              validatorsToAdd.push(Validators.max(value));\n              break;\n            case 'required':\n              if (value) {\n                validatorsToAdd.push(Validators.required);\n              }\n              break;\n            case 'requiredTrue':\n              if (value) {\n                validatorsToAdd.push(Validators.requiredTrue);\n              }\n              break;\n            case 'email':\n              if (value) {\n                validatorsToAdd.push(Validators.email);\n              }\n              break;\n            case 'minLength':\n              validatorsToAdd.push(Validators.minLength(value));\n              break;\n            case 'maxLength':\n              validatorsToAdd.push(Validators.maxLength(value));\n              break;\n            case 'pattern':\n              validatorsToAdd.push(Validators.pattern(value));\n              break;\n            case 'nullValidator':\n              if (value) {\n                validatorsToAdd.push(Validators.nullValidator);\n              }\n              break;\n            default:\n              break;\n          }\n\n          this.myForm.addControl(\n            control.name,\n            this.fb.control(control.value, validatorsToAdd)\n          );\n        }\n      }\n    }\n  }\n\n  onSubmit() {\n    console.log('Form valid: ', this.myForm.valid);\n    console.log('Form values: ', this.myForm.value);\n  }\n}\n","\n\n<mat-card class=\"question-form-container\">\n  <mat-card-content>\n    <form [formGroup]=\"myForm\" (ngSubmit)=\"onSubmit()\">\n      <div class=\"form-group\">\n        <label *ngFor=\"let type of jsonFormData?.types\">\n          <label *ngFor=\"let control of type.values\">\n            <li>\n              <span class=\"choice-container\">\n                <label>{{ control.name }}</label>\n                <label>{{ control.name }}</label>\n                <input [type]=\"control.type\" [formControlName]=\"control.name\" [value]=\"control.value\">\n                <div *ngIf=\"myForm.controls['myNum'].hasError('max')\">\n                  Minimum required number is 15.\n                </div>\n              </span>\n\n            </li>\n          </label>\n          <button type=\"submit\">Submit</button>\n        </label>\n      </div>\n    </form>\n\n  </mat-card-content>\n\n\n</mat-card>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}